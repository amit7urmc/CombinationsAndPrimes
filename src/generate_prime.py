#!/use/bin/python
"""
This module generates prime numbers and the idea is inspired by the acccompanying PDF.
"""
class GeneratePrime:
    """
    This class can be used to create prime numbers as per the algorithm in the accompanying PDF.
    """

    def __init__(self, file_to_write: str="./primeListGenerated.txt")-> None:
        """
        A list of prime numbers discovered and their current steps. 
        To save computing the length in every iteration the list length is also maintained.
        file_to_write is a file where generated prime numbers are saved.
        """
        self.prime_numbers_discovered = [2]
        self.running_numbers = 2
        self.prime_numbers_discovered_list_length = 1
        self.file_to_write = file_to_write

    def yield_prime(self, upto_n:int)->None:
        """
        upto_n denotes how many prime numbers need to be written to the file.
        """
        with open(self.file_to_write,"w", encoding='utf-8') as file_handle:
            file_handle.write("primeNumbersGenerated")
            file_handle.write("\n2")
            counter = 0
            while True:
                skip_flag = False
                self.running_numbers += 1
                for i in range(self.prime_numbers_discovered_list_length):
                    if not self.running_numbers%self.prime_numbers_discovered[i]:
                        skip_flag = True
                        break

                if not skip_flag:
                    self.prime_numbers_discovered.append(self.running_numbers)
                    self.prime_numbers_discovered_list_length += 1
                    file_handle.write(f"\n{self.running_numbers}")
                    counter += 1
                if counter >= upto_n-1:
                    break

    def compare_against_known_result(self, know_result_file:str="./PrimeNumbersTop1000.txt")->bool:
        """
        A known result file is taken as input. 
        Care must be taken that it has at least same number of primes 
        as the upto_n parameter in the yield_prime method.
        """
        present_absent = None
        with open(know_result_file, "r", encoding='utf-8') as known_handle, \
             open(self.file_to_write, "r", encoding='utf-8') as calculated_handle:
            known_result = known_handle.readlines()[1:]
            calculated_result = calculated_handle.readlines()[1:]
            assert len(known_result) == len(calculated_result)
            present_absent = [known_result[i]==calculated_result[i] \
                              for i in range(len(known_result))]
        if all(present_absent):
            return True
        return False



if __name__ == "__main__":
    UPTO_N = 1000
    FULL_MATCH_STR = "full_match"
    SOME_MISMATCH_STR = "some_mismatch"
    primeObj = GeneratePrime()
    primeObj.yield_prime(UPTO_N)
    FULL_MATCH = primeObj.compare_against_known_result()
    print(f"We tried to match first known {UPTO_N} primes with those generated by this program. \
    The answer is {FULL_MATCH_STR if FULL_MATCH else SOME_MISMATCH_STR}")
